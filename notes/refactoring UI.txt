# Refactoring UI

## Scratch
- design the features

- design with no details
  use paper, why: you cannot apply details on it

- move fast on your ideas
  forget about details and design fast your idea paper

- only necessary
  dont design every single page

- design -> code -> desing ...
  design simple feature -> go to code -> catch problems -> design it ...

- only necessary feature
  ignore 'nice-to-have' ideais

- language
  choose between formal or casual language
  
 - limit your choices
   don't waste your time by choosing small things

- define systems
  shades with 8-10 colors

- system for all
  font size, font weight, line height, color, margin, padding, width, box shadows, border radius, border width, opacity...
  other low-level design decision
  system when you're creating, don't define it at once


## Hierarchy
- size is not everything, use tools
  colors, font size, font weight, margin
  
- emphasize:
  lower: ligther weight, lighter colors, small content
  height: higher weight, dark colors, big content
  
- never gray text on colored backgrounds
  instead of constrasted, it turns to opaque and bad legibility
  keep a similiar lighter background color version
 
- de-emphasize around to emphasize the main

- Labels

  - label is the last resource
    data displayed by label is hard to read
    use colors, sizes, formats (xxx@gmail.com, (00) 00000-0000, ...)
  
  - label and value, value and label
    play with their position, ex: Quatity: 1 -> 1 Left Quantity
  
  - labels are secondary
    dont give all attention to labels in your screen
- 
